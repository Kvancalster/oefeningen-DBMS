## CREATING DATABASE & ADDING TABLES to db

1) Create a db (only sudo can create a db)
	A. Logged into MariaDB
		$ sudo mariadb (login from linux)
		$ CREATE DATABASE <name>; (dont forget semicolon)
	B. from linux CLI
		$ sudo mysqladmin create <name>

2) grant access to user (once created, a db is only visible for sudo. To start using it you have to grant acess)
	INSIDE mariadb:
		$ GRANT ALL ON <name>.* TO kevin@localhost; (note a db can consist out of multiple tables, to grant access to all the tables add wildcard ".*")

3) import a table into a db (first create the actual database, see steps 1 & 2)
	LINUX (specify the location or move to folder where file is located)
		$ mariadb dbName < file.txt
			eg. $ mariadb biodb < Downloads/1.sql

## BASIC COMMANDS (hierarchy)

1) show dbs available inside the mariaDB service (one service can contain multiple databases)
	$ show databases;
2) start using a database
	$ USE <name>;
3) 1 database can contain multiple tables
	$ SHOW tables;
4) show information about table (how many columns/fields, what type of data is present)
	$ SHOW columns from <table_name>;
	alternatief: $ SHOW CREATE <table_name>

## CRUD commands
1) insert - add new rows to a tb (make sure you are using the db, that contains the table)
	$ INSERT INTO <table_name> (col1,col2,col3) VALUES (int,'string','string'); (note strings always between '', not all columns require a value --> NULL assigned,
			columns with NOT NULL constraint need to have a value, PK always unique)
2) SELECT - retrieve rows (read)
	A. select certain columns /// select ALL columns
		$ SELECT col1,col2,col3 FROM modorg; /// $ SELECT * FROM modorg;
	B. ORDER BY (sort the selected columns)
		$ SELECT * FROM modorg ORDER BY col1 asc/desc, col2 asc/desc/
			(note: asc default no need to specify)
	C. concat(s1,s2) function, concatinate multiple columns (vb 2 --> 1 column)
		$ SELECT concat(class, " ", genus) FROM modorg;
			(note dont forget quotes seperate by space , " ", )
		https://mariadb.com/kb/en/string-functions/
	D. round(NUM,2) num can be a column name or a calculation. number after comma specifies the decimal places.
		$ round(4.56) --> 5  //// $ round (1.123,1) --> 1.2
			MariaDB [biodb]> SELECT round(gsize/1000,4) FROM modorg;
		https://mariadb.com/kb/en/numeric-functions/
	E. year(date)
		$ YEAR('1987-01-01') --> 1987
			ELECT year(draft) FROM modorg;
		https://mariadb.com/kb/en/date-time-functions/
	F. column aliasses (rename columns)
		$ select col A alias FROM ....;
			MariaDB [biodb]> SELECT gsize/nchr as AvgChrSize from modorg;
		note if you want spaces in name you have to use " ", WARNING cant be used in sorting in this case (ORDER BY)
			MariaDB [biodb]> SELECT gsize/nchr as "Avg Chr Size" from modorg;
	G. WHERE - filer rows
		$ SELECT col from tbl WHERE condition(s) [ORDER BY col]
			- combine combinations AND, OR, NOT,XOR (BOOLEAN logic)
				NOT X --> TRUE if x=FALSE
					MariaDB [biodb]> SELECT * FROM modorg where class!="mammals";
				x AND Y --> both x and y need to be true
				x OR Y --> true if x and/or y =true
					MariaDB [biodb]> SELECT * FROM modorg where class="mammals" OR class="insects";
				x XOR Y --> true if x OR y = true, NOT both!
			- only rows where condition=TRUE are selected
			- can't use ALIASES!!!
			- numerical operators
				=
				!= or <> (not equal)
				<, <=,>,=>
				BETWEEN x AND Y (result includes x and y, works on dates)
					MariaDB [biodb]> SELECT genus,species FROM modorg WHERE nchr > 10;
					MariaDB [biodb]> SELECT genus,species FROM modorg WHERE nchr BETWEEN 6 AND 20;
			- string comparison operators
				=
				!= or <> (not equal)
				<, <=,>,=> (lexical)
					MariaDB [biodb]> SELECT * FROM modorg WHERE class="mammals";
				like "pattern": _(matches single character), %(zero or more characters)
					MariaDB [biodb]> select * FROM modorg WHERE species LIKE  "m%";
				rlike "regex": matches regular expression pattern (MySQL specific)
					OUT OF SCOPE
			- Testing for null values
				SELECT ... WHERE col is NULL;
				SELECT ... WHERE col is NOT NULL;
					MariaDB [biodb]> SELECT * FROM modorg WHERE draft IS NULL;
	H. substitute NULL values
		$ SELECT ifnull(col,new_value);
			result: col is NOT NULL --> col
			result: col is NULL --> new_value
				MariaDB [biodb]> SELECT genus,species, ifnull(nchr,0) FROM modorg;




